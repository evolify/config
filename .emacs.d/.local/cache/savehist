;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(command-history bookmark-history grep-history read-expression-history minibuffer-history shell-command-history counsel-locate-history evil-ex-search-history ivy-history empty-history counsel-M-x-history file-name-history evil-ex-history))
(setq command-history '((load-theme 'doom-one-light nil nil) (load-theme 'doom-opera-light nil nil) (load-theme 'doom-gruvbox-light nil nil) (load-theme 'doom-city-lights nil nil) (load-theme 'doom-ayu-mirage nil nil) (load-theme 'doom-ayu-light nil nil) (magit nil '((49 . 30) ((magit-get-push-branch #("chore-rem" 0 9 (face magit-branch-local font-lock-face magit-branch-local)) nil)) ((magit-get-upstream-branch "feature-tryout")) (("/Users/evolify/mi/code/webapp/" "rev-parse" "--short" "HEAD~") . "08747c6") (("/Users/evolify/mi/code/webapp/" "rev-parse" "--short" "HEAD") . "d1ca2d5") (("/Users/evolify/mi/code/webapp/" "rev-parse" "--verify" "HEAD~10") . "b83c8e1a6ad3882e6c6444d68d84bdcee83dc4e4") ((magit-get-upstream-branch nil)) (("/Users/evolify/mi/code/webapp/" "rev-parse" "--verify" "--abbrev-ref" "feature-tryout@{upstream}")) ((magit-get-push-branch nil nil)) (("/Users/evolify/mi/code/webapp/" "rev-parse" "--verify" "refs/stash")) (("/Users/evolify/mi/code/webapp/" "rev-parse" "--is-bare-repository") . "false
") (("/Users/evolify/mi/code/webapp/" "version") . "git version 2.30.1 (Apple Git-130)") (("/Users/evolify/mi/code/webapp/" magit-git-dir "BISECT_LOG") . "/Users/evolify/mi/code/webapp/.git/BISECT_LOG") (("/Users/evolify/mi/code/webapp/" magit-git-dir "REVERT_HEAD") . "/Users/evolify/mi/code/webapp/.git/REVERT_HEAD") (("/Users/evolify/mi/code/webapp/" magit-git-dir "CHERRY_PICK_HEAD") . "/Users/evolify/mi/code/webapp/.git/CHERRY_PICK_HEAD") (("/Users/evolify/mi/code/webapp/" magit-git-dir "rebase-apply/applying") . "/Users/evolify/mi/code/webapp/.git/rebase-apply/applying") (("/Users/evolify/mi/code/webapp/" magit-git-dir "rebase-apply/onto") . "/Users/evolify/mi/code/webapp/.git/rebase-apply/onto") (("/Users/evolify/mi/code/webapp/" magit-git-dir "rebase-merge") . "/Users/evolify/mi/code/webapp/.git/rebase-merge") (("/Users/evolify/mi/code/webapp/" magit-git-dir "MERGE_HEAD") . "/Users/evolify/mi/code/webapp/.git/MERGE_HEAD") (("/Users/evolify/mi/code/webapp/" "rev-parse" "--git-dir") . ".git") (("/Users/evolify/mi/code/webapp/" "describe" "--contains" "HEAD")) (("/Users/evolify/mi/code/webapp/" "describe" "--long" "--tags")) ((magit-get-push-branch "feature-tryout" nil)) (("/Users/evolify/mi/code/webapp/" "show" "--no-patch" "--format=%h %s" "HEAD^{commit}" "--") . "d1ca2d5 feat: 米家众测页") (("/Users/evolify/mi/code/webapp/" "symbolic-ref" "--short" "HEAD") . "feature-tryout") (("/Users/evolify/mi/code/webapp/" . config) . #s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("credential.helper" ("osxkeychain") "user.name" ("evolify" "彭顺") "user.email" ("wolf@evolify.cn" "pengshun@xiaomi.com") "core.autocrlf" ("false") "core.safecrlf" ("true") "core.editor" ("nvim") "core.excludesfile" ("/Users/evolify/.gitignore_global") "difftool.sourcetree.cmd" ("opendiff \"$LOCAL\" \"$REMOTE\"") "difftool.sourcetree.path" ("") "mergetool.sourcetree.cmd" ("/Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"") "mergetool.sourcetree.trustexitcode" ("true") "commit.template" ("/Users/evolify/.stCommitMsg") "includeif.gitdir:~/mi/code/.path" ("~/mi/code/.gitconfig") "include.path" ("/Users/evolify/.gitalias.txt") "alias.a" ("add") "alias.b" ("branch") "alias.c" ("commit") "alias.d" ("diff") "alias.f" ("fetch") "alias.g" ("grep" "grep") "alias.l" ("log") "alias.m" ("merge") "alias.o" ("checkout") "alias.p" ("pull") "alias.r" ("remote") "alias.s" ("status") "alias.w" ("whatchanged") "alias.aa" ("add --all") "alias.ap" ("add --patch") "alias.au" ("add --update") "alias.bd" ("!git config branch.$(git rev-parse --abbrev-ref HEAD 2>/dev/null).description") "alias.be" ("branch --edit-description") "alias.bm" ("branch --merged") "alias.bnm" ("branch --no-merged") "alias.ca" ("commit --amend") "alias.cam" ("commit --amend --message") "alias.cane" ("commit --amend --no-edit") "alias.ci" ("commit --interactive") "alias.cm" ("commit --message") "alias.co" ("checkout") "alias.con" ("checkout --no-guess") "alias.cp" ("cherry-pick") "alias.cpa" ("cherry-pick --abort") "alias.cpc" ("cherry-pick --continue") "alias.cp-nx" ("cherry-pick --no-commit -x") "alias.dc" ("diff --cached") "alias.ds" ("diff --staged") "alias.dw" ("diff --word-diff") "alias.dd" ("diff --check --dirstat --find-copies --find-renames --histogram --color") "alias.cleanest" ("clean -ffdx") "alias.gl" ("grep --line-number") "alias.gg" ("grep --break --heading --line-number --color") "alias.lg" ("log --graph") "alias.lo" ("log --oneline") "alias.lp" ("log --patch") "alias.lfp" ("log --first-parent") "alias.lt" ("log --topo-order") "alias.ll" ("log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'") "alias.lll" ("log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --abbrev=40 --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn <%ce>]%Creset %Cblue%G?%Creset'") "alias.ls" ("ls-files") "alias.ls-ignored" ("ls-files --others --i --exclude-standard") "alias.me" ("merge --no-commit --no-ff") "alias.pf" ("pull --ff-only") "alias.pr" ("pull --rebase") "alias.pp" ("pull --rebase=preserve") "alias.rb" ("rebase") "alias.rba" ("rebase --abort") "alias.rbc" ("rebase --continue") "alias.rbs" ("rebase --skip") "alias.rbi" ("rebase --interactive @{upstream}") "alias.fixup" ("!f() { TARGET=$(git rev-parse \"$1\"); git commit --fixup=$TARGET && GIT_EDITOR=true git rebase --interactive --autosquash $TARGET~; }; f") "alias.rl" ("reflog") "alias.rr" ("remote") "alias.rrs" ("remote show") "alias.rru" ("remote update") "alias.rrp" ("remote prune") "alias.incoming" ("!git remote update --prune") "alias.outgoing" ("log @{upstream}..") "alias.push-to-all-remotes" ("!git remote | xargs -I% -n1 git push %") "alias.rv" ("revert") "alias.rvnc" ("revert --no-commit") "alias.sb" ("show-branch") "alias.sm" ("submodule") "alias.smi" ("submodule init") "alias.sma" ("submodule add") "alias.sms" ("submodule sync") "alias.smu" ("submodule update") "alias.smui" ("submodule update --init") "alias.smuir" ("submodule update --init --recursive") "alias.ss" ("status --short") "alias.ssb" ("status --short --branch") "alias.aliases" ("!git config --get-regexp '^alias\\.' | cut -c 7- | sed 's/ / = /'") "alias.add-alias" ("!f() { [ $# = 3 ] && git config $1 alias.\"$2\" \"$3\" && return 0 || echo \"Usage: git add-(local|global)-alias <new alias> <original command>\" >&2 && return 1; }; f") "alias.add-global-alias" ("!git add-alias --global") "alias.add-local-alias" ("!git add-alias --local") "alias.rename-alias" ("!f() { [ $# = 3 ] && [ $2 != $3 ] && [ ! -z \"$(git config $1 --get alias.$2)\" ] && [ -z \"$(git config $1 --get alias.$3)\" ] && git config $1 alias.$3 \"$(git config $1 --get alias.$2)\" && git config $1 --unset alias.$2 && return 0 || echo \"Usage: git rename-(local|global)-alias <alias existing name> <new alias name>
The alias you are going to rename must exist and new name must not exist.\" >&2 && return 1; };f") "alias.rename-global-alias" ("!git rename-alias --global") "alias.rename-local-alias" ("!git rename-alias --local") "alias.lasttag" ("describe --tags --abbrev=0") "alias.lasttagged" ("!git describe --tags `git rev-list --tags --max-count=1`") "alias.head" ("log -n1") "alias.heads" ("!git log origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'") "alias.lost" ("!git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'") "alias.diff-all" ("!for name in $(git diff --name-only $1); do git difftool $1 $name & done") "alias.diff-changes" ("diff --name-status -r") "alias.diff-stat" ("diff --stat --ignore-space-change -r") "alias.diff-staged" ("diff --cached") "alias.diff-deep" ("diff --check --dirstat --find-copies --find-renames --histogram --color") "alias.grep-all" ("!f() { git rev-list --all | xargs git grep \"$@\"; }; f") "alias.grep-group" ("grep --break --heading --line-number --color") "alias.grep-ack" ("-c color.grep.linenumber=\"bold yellow\"     -c color.grep.filename=\"bold green\"     -c color.grep.match=\"reverse yellow\"     grep --break --heading --line-number") "alias.init-empty" ("!f() { git init && git commit --allow-empty --allow-empty-message --message ''; }; f") "alias.merge-span" ("!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f") "alias.merge-span-log" ("!git log `git merge-span .. $1`") "alias.merge-span-diff" ("!git diff `git merge-span ... $1`") "alias.merge-span-difftool" ("!git difftool `git merge-span ... $1`") "alias.rebase-branch" ("!git rebase --interactive `git merge-base master HEAD`") "alias.refs-by-date" ("for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)'") "alias.orphans" ("fsck --full") "alias.rev-list-all-objects-by-size" ("!git rev-list --all --objects  | awk '{print $1}'| git cat-file --batch-check | fgrep blob | sort -k3nr") "alias.rev-list-all-objects-by-size-and-name" ("!git rev-list --all --objects | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | awk '/^blob/ {print substr($0,6)}' | sort --numeric-sort --key=2") "alias.log-changes" ("log --oneline --reverse") "alias.log-fresh" ("log ORIG_HEAD.. --stat --no-merges") "alias.log-like" ("log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'") "alias.log-like-long" ("log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn <%ce>]%Creset %Cblue%G?%Creset'") "alias.log-local" ("log --date=local" "log --oneline origin..HEAD") "alias.log-my" ("!git log --author $(git config user.email)") "alias.log-graph" ("log --graph --all --oneline --decorate") "alias.log-first-date" ("!git log --date-order --format=%cI | tail -1") "alias.log-latest-date" ("log -1 --date-order --format=%cI") "alias.log-hour" ("log --since=1-hour-ago") "alias.log-day" ("log --since=1-day-ago") "alias.log-week" ("log --since=1-week-ago") "alias.log-month" ("log --since=1-month-ago") "alias.log-year" ("log --since=1-year-ago") "alias.log-my-hour" ("log --author $(git config user.email) --since=1-hour-ago") "alias.log-my-day" ("log --author $(git config user.email) --since=1-day-ago") "alias.log-my-week" ("log --author $(git config user.email) --since=1-week-ago") "alias.log-my-month" ("log --author $(git config user.email) --since=1-month-ago") "alias.log-my-year" ("log --author $(git config user.email) --since=1-year-ago") "alias.log-of-format-and-count" ("!f() { format=\"$1\"; shift; git log $@ --format=oneline --format=$format | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort; }; f") "alias.log-of-count-and-format" ("!f() { format=\"$1\"; shift; git log $@ --format=oneline --format=$format | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f") "alias.log-of-format-and-count-with-date" ("!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort -r; }; f") "alias.log-of-count-and-format-with-date" ("!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f") "alias.log-of-email-and-count" ("!f() { git log-of-format-and-count \"%aE\" $@; }; f") "alias.log-of-count-and-email" ("!f() { git log-of-count-and-format \"%aE\" $@; }; f") "alias.log-of-hour-and-count" ("!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f") "alias.log-of-count-and-hour" ("!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f") "alias.log-of-day-and-count" ("!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f") "alias.log-of-count-and-day" ("!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f") "alias.log-of-week-and-count" ("!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y#%V\" $@; }; f") "alias.log-of-count-and-week" ("!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y#%V\" $@; }; f") "alias.log-of-month-and-count" ("!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m\" $@ ; }; f") "alias.log-of-count-and-month" ("!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m\" $@ ; }; f") "alias.log-of-year-and-count" ("!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y\" $@ ; }; f") "alias.log-of-count-and-year" ("!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y\" $@ ; }; f") "alias.log-of-hour-of-day-and-count" ("!f() { git log-of-format-and-count-with-date \"%ad\" \"%H\" $@; }; f") "alias.log-of-count-and-hour-of-day" ("!f() { git log-of-count-and-format-with-date \"%ad\" \"%H\" $@; }; f") "alias.log-of-day-of-week-and-count" ("!f() { git log-of-format-and-count-with-date \"%ad\" \"%u\" $@; }; f") "alias.log-of-count-and-day-of-week" ("!f() { git log-of-count-and-format-with-date \"%ad\" \"%u\" $@; }; f") "alias.log-of-week-of-year-and-count" ("!f() { git log-of-format-and-count-with-date \"%ad\" \"%V\" $@; }; f") "alias.log-of-count-and-week-of-year" ("!f() { git log-of-count-and-format-with-date \"%ad\" \"%V\" $@; }; f") "alias.log-refs" ("log --all --graph --decorate --oneline --simplify-by-decoration --no-merges") "alias.log-timeline" ("log --format='%h %an %ar - %s'") "alias.log-fetched" ("log --oneline HEAD..origin/master") "alias.chart" ("!f() {     git log     --format=oneline     --format=\"%aE %at\"     --since=6-weeks-ago     $* |     awk '     function time_to_slot(t) { return strftime(\"%Y-%m-%d\", t, true) }     function count_to_char(i) { return (i > 0) ? ((i < 10) ? i : \"X\") : \".\" }     BEGIN {       time_min = systime(); time_max = 0;       SECONDS_PER_DAY=86400;     }     {       item = $1;       time = 0 + $2;       if (time > time_max){ time_max = time } else if (time < time_min){ time_min = time };       slot = time_to_slot(time);       items[item]++;       slots[slot]++;       views[item, slot]++;     }     END{       printf(\"Chart time range %s to %s.\\n\", time_to_slot(time_min), time_to_slot(time_max));       time_max_add = time_max += SECONDS_PER_DAY;       for(item in items){         row = \"\";         for(time = time_min; time < time_max_add; time += SECONDS_PER_DAY) {           slot = time_to_slot(time);           count = views[item, slot];           row = row count_to_char(count);         }         print row, item;       }     }';   }; f") "alias.churn" ("!f() { git log --all --find-copies --find-renames --name-only --format='format:' \"$@\" | awk 'NF{a[$0]++}END{for(i in a){print a[i], i}}' | sort -rn;};f") "alias.summary" ("!f() {     printf \"Summary of this branch...
\";     printf \"%s
\" $(git rev-parse --abbrev-ref HEAD);     printf \"%s first commit timestamp
\" $(git log --date-order --format=%cI | tail -1);     printf \"%s latest commit timestamp
\" $(git log -1 --date-order --format=%cI);     printf \"%d commit count
\" $(git rev-list --count HEAD);     printf \"%d date count
\" $(git log --format=oneline --format=\"%ad\" --date=format:\"%Y-%m-%d\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}');     printf \"%d tag count
\" $(git tag | wc -l);     printf \"%d author count
\" $(git log --format=oneline --format=\"%aE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}');     printf \"%d committer count
\" $(git log --format=oneline --format=\"%cE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}');     printf \"%d local branch count
\" $(git branch | grep -v \" -> \" | wc -l);     printf \"%d remote branch count
\" $(git branch -r | grep -v \" -> \" | wc -l);     printf \"
Summary of this directory...
\";     printf \"%s
\" $(pwd);     printf \"%d file count via git ls-files
\" $(git ls-files | wc -l);     printf \"%d file count via find command
\" $(find . | wc -l);     printf \"%d disk usage
\" $(du -s | awk '{print $1}');     printf \"
Most-active authors, with commit count and %%...
\"; git log-of-count-and-email | head -7;     printf \"
Most-active dates, with commit count and %%...
\"; git log-of-count-and-day | head -7;     printf \"
Most-active files, with churn count
\"; git churn | head -7;   }; f") "alias.ref-recent" ("!git for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) %(objectname:short) %(contents:subject)' refs/heads/") "alias.whois" ("!sh -c 'git log --regexp-ignore-case -1 --pretty=\"format:%an <%ae>
\" --author=\"$1\"' -") "alias.whatis" ("show --no-patch --pretty='tformat:%h (%s, %ad)' --date=short") "alias.who" ("shortlog --summary --") "alias.whorank" ("shortlog --summary --numbered --no-merges") "alias.issues" ("!sh -c \"git log $1 --oneline | grep -o \\\"ISSUE-[0-9]\\+\\\" | sort -u\"") "alias.commit-parents" ("!f(){ git cat-file -p \"${*:-HEAD}\" | sed -n '/0/,/^ *$/{/^parent /p}'; };f") "alias.commit-is-merge" ("!f(){ [ -n \"$(git commit-parents \"$*\" | sed '0,/^parent /d')\" ];};f") "alias.commit-message-key-lines" ("!f(){ echo \"Commit: $1\"; git log \"$1\" --format=fuller | grep \"^[[:blank:]]*[[:alnum:]][-[:alnum:]]*:\" | sed \"s/^[[:blank:]]*//; s/:[[:blank:]]*/: /\"; }; f") "alias.cloner" ("clone --recursive") "alias.clone-lean" ("clone --depth 1 --filter=combine:blob:none+tree:0 --no-checkout") "alias.save" ("stash push") "alias.pop" ("stash pop") "alias.snapshot" ("!git stash push snapshot: $(date) && git stash apply stash@{0}") "alias.panic" ("!tar cvf ../panic.tar *") "alias.archive" ("!f() { top=$(rev-parse --show-toplevel); cd $top; tar cvf $top.tar $top ; }; f") "alias.get" ("!git fetch --prune && git pull --rebase && git submodule update --init --recursive") "alias.put" ("!git commit --all && git push") "alias.mastery" ("!git checkout master && git fetch origin --prune && git reset --hard origin/master") "alias.ignore" ("!git status | grep -P \"^\\t\" | grep -vF .gitignore | sed \"s/^\\t//\" >> .gitignore") "alias.push1" ("!git push origin $(git branch-name)") "alias.pull1" ("!git pull origin $(git branch-name)") "alias.track" ("!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch $branch -u ${1:-origin}/${2:-$branch}\"; echo $cmd; $cmd; }; f") "alias.untrack" ("!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch --unset-upstream ${1:-$branch}\"; echo $cmd; $cmd; }; f") "alias.track-all-remote-branches" ("!f() { git branch -r | grep -v ' -> ' | sed 's/^ \\+origin\\///' ; }; f") "alias.reset-commit" ("reset --soft HEAD~1") "alias.reset-commit-hard" ("reset --hard HEAD~1") "alias.reset-commit-clean" ("!git reset --hard HEAD~1 && git clean -fd") "alias.reset-to-pristine" ("!git reset --hard && git clean -ffdx") "alias.reset-to-upstream" ("!git reset --hard $(git upstream-name)") "alias.undo-commit" ("reset --soft HEAD~1") "alias.undo-commit-hard" ("reset --hard HEAD~1") "alias.undo-commit-clean" ("!git reset --hard HEAD~1 && git clean -fd") "alias.undo-to-pristine" ("!git reset --hard && git clean -ffdx") "alias.undo-to-upstream" ("!git reset --hard $(git upstream-name)") "alias.uncommit" ("reset --soft HEAD~1") "alias.unadd" ("reset HEAD") "alias.unstage" ("reset HEAD") "alias.discard" ("checkout --") "alias.cleanout" ("!git clean -df && git checkout -- .") "alias.expunge" ("!f() { git filter-branch --force --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all }; f") "alias.edit-cached" ("!f() { git ls-files --cached          | sort -u ; }; `git var GIT_EDITOR` `f`") "alias.edit-deleted" ("!f() { git ls-files --deleted         | sort -u ; }; `git var GIT_EDITOR` `f`") "alias.edit-others" ("!f() { git ls-files --others          | sort -u ; }; `git var GIT_EDITOR` `f`") "alias.edit-ignored" ("!f() { git ls-files --ignored         | sort -u ; }; `git var GIT_EDITOR` `f`") "alias.edit-killed" ("!f() { git ls-files --killed          | sort -u ; }; `git var GIT_EDITOR` `f`") "alias.edit-modified" ("!f() { git ls-files --modified        | sort -u ; }; `git var GIT_EDITOR` `f`") "alias.edit-stage" ("!f() { git ls-files --stage | cut -f2 | sort -u ; }; `git var GIT_EDITOR` `f`") "alias.edit-unmerged" ("!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; `git var GIT_EDITOR` `f`") "alias.add-unmerged" ("!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`") "alias.ours" ("!f() { git checkout --ours   $@ && git add $@; }; f") "alias.theirs" ("!f() { git checkout --theirs $@ && git add $@; }; f") "alias.wip" ("!git add --all; git ls-files --deleted -z | xargs -0 git rm; git commit --message=wip") "alias.unwip" ("!git log -n 1 | grep -q -c wip && git reset HEAD~1") "alias.assume" ("update-index --assume-unchanged") "alias.unassume" ("update-index --no-assume-unchanged") "alias.assume-all" ("!git st -s | awk {'print $2'} | xargs git assume") "alias.unassume-all" ("!git assumed | xargs git update-index --no-assume-unchanged") "alias.assumed" ("!git ls-files -v | grep ^h | cut -c 3-") "alias.master-cleanse" ("!git master-cleanse-local") "alias.master-cleanse-local" ("!git checkout master && git branch --merged | xargs git branch --delete") "alias.master-cleanse-remote" ("!git branch --remotes --merged origin/master | sed 's# *origin/##' | grep -v '^master$' xargs -I% git push origin :% 2>&1 | grep --colour=never 'deleted'") "alias.publish" ("!git push --set-upstream origin $(git branch-name)") "alias.unpublish" ("!git push origin :$(git branch-name)") "alias.reincarnate" ("!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f") "alias.branches" ("branch -a") "alias.tags" ("tag -n1 --list") "alias.stashes" ("stash list") "alias.top-name" ("rev-parse --show-toplevel") "alias.branch-name" ("rev-parse --abbrev-ref HEAD") "alias.upstream-name" ("!git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)") "alias.exec" ("! exec") "alias.pruner" ("!git prune --expire=now; git reflog expire --expire-unreachable=now --rewrite --all") "alias.repacker" ("repack -a -d -f --depth=300 --window=300 --window-memory=1g") "alias.optimize" ("!git pruner") "alias.searchcommits" ("!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\"") "alias.debug" ("!GIT_PAGER= gdb --args git") "alias.intercommit" ("!sh -c 'git show $1 > .git/commit1 && git show $2 > .git/commit2 && interdiff .git/commit[12] | less -FRS' -") "alias.prune-all" ("!git remote | xargs -n 1 git remote prune") "alias.cherry-pick-merge" ("!sh -c 'git cherry-pick --no-commit --mainline 1 $0 &&     git log -1 --pretty=%P $0 | cut -b 42- > .git/MERGE_HEAD &&     git commit --verbose'") "alias.remote-ref" ("!sh -c '     local_ref=$(git symbolic-ref HEAD);     local_name=${local_ref##refs/heads/};     remote=$(git config branch.\"#local_name\".remote || echo origin);     remote_ref=$(git config branch.\"$local_name\".merge);     remote_name=${remote_ref##refs/heads/};     echo remotes/$remote/$remote_name'") "alias.rebase-recent" ("!git rebase --interactive $(git remote-ref)") "alias.graphviz" ("!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f") "alias.serve" ("-c daemon.receivepack=true daemon --base-path=. --export-all --reuseaddr --verbose") "alias.topic-base-branch-name" ("!f(){     git config --get gitalias.topic.base.branch.name || printf '%s
' main;   };f") "alias.topic-start" ("!f(){     topic_branch=\"$1\";     base_branch=$(git topic-base-branch-name);     git checkout \"$base_branch\"; git pull;     git checkout -b \"$topic_branch\" \"$base_branch\";     git push --set-upstream origin \"$topic_branch\";   };f") "alias.topic-stop" ("!f(){     topic_branch=$(git branch-name);     base_branch=$(git topic-base-branch-name);     if [ \"$topic_branch\" = \"$base_branch\" ]; then       printf \"You are asking to do git topic-stop,
\";       printf \"but you are not currently on a topic branch;
\";       printf \"you are on the base branch: $base_branch.
\";       printf \"Please checkout the topic branch that you want,
\";       printf \"then retry the git topic delete command.
\";     else       git push;       git checkout \"$base_branch\";       git branch --delete \"$topic_branch\";       git push origin \":$topic_branch\";     fi;   };f") "alias.topic-sync" ("!f(){     topic_branch=$(git branch-name);     base_branch=$(git topic-base-branch-name);     if [ \"$topic_branch\" = \"$base_branch\" ]; then       printf \"You are asking to do git topic-sync,
\";       printf \"but you are not currently on a topic branch;
\";       printf \"you are on the base branch: $base_branch.
\";       printf \"Please checkout the topic branch that you want,
\";       printf \"then retry the git topic delete command.
\";     else       git pull;       git push;     fi;   };f") "alias.topic-move" ("!f(){     new_branch=\"$1\";     old_branch=$(git branch-name);     git branch --move \"$old_branch\" \"$new_branch\";     git push origin \":$old_branch\" \"$new_branch\";   };f") "alias.cvs-i" ("cvsimport -k -a") "alias.cvs-e" ("cvsexportcommit -u -p") "alias.gitk-conflict" ("!gitk --left-right HEAD...MERGE_HEAD") "alias.gitk-history-all" ("!gitk --all $( git fsck | awk '/dangling commit/ {print $3}' )") "alias.rails-get" ("!git pull --rebase; git submodule update --init --recursive; bundle check || bundle install; bundle exec rake db:migrate; bundle exec rake db:test:prepare") "alias.svn-b" ("svn branch") "alias.svn-m" ("merge --squash") "alias.svn-c" ("svn dcommit") "alias.svn-cp" ("!GIT_EDITOR='sed -i /^git-svn-id:/d' git cherry-pick --edit") "alias.ull" ("pull") "alias.ush" ("push") "filter.lfs.clean" ("git-lfs clean -- %f") "filter.lfs.smudge" ("git-lfs smudge -- %f") "filter.lfs.process" ("git-lfs filter-process") "filter.lfs.required" ("true") "pull.rebase" ("true") "core.repositoryformatversion" ("0") "core.filemode" ("true") "core.bare" ("false") "core.logallrefupdates" ("true") "core.ignorecase" ("true") "core.precomposeunicode" ("true") "remote.origin.url" ("git@git.n.xiaomi.com:iot-web/webapp.git") "remote.origin.fetch" ("+refs/heads/*:refs/remotes/origin/*") "branch.master.remote" ("origin") "branch.master.merge" ("refs/heads/master") "branch.feature-doc.remote" ("origin") "branch.feature-doc.merge" ("refs/heads/feature-doc") "branch.feature-tob.remote" ("origin") "branch.feature-tob.merge" ("refs/heads/feature-tob") "branch.feature-feedback.remote" ("origin") "branch.feature-feedback.merge" ("refs/heads/feature-feedback") "branch.feat-mijia.remote" ("origin") "branch.feat-mijia.merge" ("refs/heads/feat-mijia") "branch.feature-debug.remote" ("origin") "branch.feature-debug.merge" ("refs/heads/feature-debug") "branch.feat-doc.remote" ("origin") "branch.feat-doc.merge" ("refs/heads/feat-doc") "branch.feature-auto_add.remote" ("origin") "branch.feature-auto_add.merge" ("refs/heads/feature-auto_add") "branch.feat-auto_add.remote" ("origin") "branch.feat-auto_add.merge" ("refs/heads/feat-auto_add") "branch.beta.remote" ("origin") "branch.beta.merge" ("refs/heads/beta") "branch.feature-sentry.remote" ("origin") "branch.feature-sentry.merge" ("refs/heads/feature-sentry") "branch.chore-scripts.remote" ("origin") "branch.chore-scripts.merge" ("refs/heads/chore-scripts") "branch.fix-sentry.remote" ("origin") "branch.fix-sentry.merge" ("refs/heads/fix-sentry") "branch.feature-mijia_changelog.remote" ("origin") "branch.feature-mijia_changelog.merge" ("refs/heads/feature-mijia_changelog") "branch.chore-rem.remote" ("origin") "branch.chore-rem.merge" ("refs/heads/chore-rem") "branch.feature-explore.remote" ("origin") "branch.feature-explore.merge" ("refs/heads/feature-explore") "branch.alpha.remote" ("origin") "branch.alpha.merge" ("refs/heads/alpha") "core.preloadindex" ("true") "log.showsignature" ("false") "color.ui" ("false") "color.diff" ("false")))) (("/Users/evolify/mi/code/webapp/" . magit-toplevel) . "/Users/evolify/mi/code/webapp/") (("/Users/evolify/mi/code/webapp/" "rev-parse" "--show-toplevel") . "/Users/evolify/mi/code/webapp") (("/Users/evolify/mi/code/webapp/" "rev-parse" "--verify" "HEAD") . "d1ca2d5ba0604795eb92135d2c567714b93bb1f6") (("/Users/evolify/mi/code/webapp/src/apps/@tryout/components/apply/" . magit-toplevel) . "/Users/evolify/mi/code/webapp/") (("/Users/evolify/mi/code/webapp/src/apps/@tryout/components/apply/" "rev-parse" "--show-toplevel") . "/Users/evolify/mi/code/webapp"))) (magit-worktree) (doom/reload) (evil-delete 89 99 'exclusive nil nil) (ace-window 1) (evil-set-marker 104) (ace-window 1) (ace-window 1) (+zen/toggle-fullscreen) (+zen/toggle-fullscreen) (+zen/toggle 'toggle) (treemacs-add-project-to-workspace "/Users/evolify/mi/code/webapp/") (find-file "/Users/evolify/mi/code/webapp/" t) (projectile-switch-open-project nil) (windmove-left nil) (windmove-right nil) (evil-delete 423 424 'line nil nil) (evil-delete 423 444 'line nil nil) (lsp-ui-mode 'toggle) (doom/reload) (calendar nil) (customize-option 'tool-bar-style) (customize) (customize-option 'tool-bar-mode) (doom/reload) (doom/reload) (term "/bin/zsh") (helpful-key "")))
(setq grep-history '("grep  -nH --null -e store" "grep  -nH --null -e track"))
(setq read-expression-history '("q"))
(setq minibuffer-history '("/bin/zsh" "25" "20" "30" "10" "20" "5" "10" "6" "10" "12" "16" "22"))
(setq shell-command-history '("ls"))
(setq evil-ex-search-history '("sum" "counter" "conter"))
(setq ivy-history '(#("doom-one-light" 0 14 (ivy-index 6)) #("doom-opera-light" 0 16 (ivy-index 40)) #("doom-gruvbox-light" 0 18 (ivy-index 14)) #("doom-city-lights" 0 16 (ivy-index 8)) #("doom-ayu-mirage" 0 15 (ivy-index 1)) #("doom-ayu-light" 0 14 (ivy-index 4)) #("src/apps/@tryout/components/apply/Lottery.tsx" 0 45 (ivy-index 0)) #("~/mi/code/webapp/" 0 17 (ivy-index 1)) #("src/apps/@tryout/api.tsx" 0 24 (ivy-index 0)) #("test.js" 0 7 (ivy-index 5)) #("~/code/web/activity/" 0 20 (ivy-index 2)) #("explore" 0 7 (ivy-index 0)) "src/apps/content/@explore/utils.ts" #("test" 0 4 (ivy-index 0)) #("tool-bar-style" 0 14 (ivy-index 6)) #("tool-bar-mode" 0 13 (ivy-index 0)) #("tree" 0 4 (ivy-index 9)) "treemacs-select-window" "treemacs" #("/Users/evolify/code/web/b/App.jsx" 0 33 (ivy-index 1)) #("/Users/evolify/.emacs.d/.local/etc/workspaces/autosave" 0 54 (ivy-index 0)) #("App.jsx" 0 7 (ivy-index 0)) #("Default" 0 7 (ivy-index 2)) #("doom-colors" 0 11 (ivy-index 0)) #("doom-atom" 0 9 (ivy-index 1)) #("RecoilStore.jsx" 0 15 (ivy-index 0)) #("~/code/web/b/" 0 13 (ivy-index 0)) #("jsconfig.json" 0 13 (ivy-index 0)) #("doom-tomorrow-day" 0 17 (ivy-index 55)) #("doom-vibrant" 0 12 (ivy-index 57)) #("doom-xcode" 0 10 (ivy-index 59)) #("tsdh-light" 0 10 (ivy-index 71)) #("doom-one" 0 8 (ivy-index 39)) #("doom-nord-light" 0 15 (ivy-index 33)) #("doom-acario-dark" 0 16 (ivy-index 2)) #("doom-Iosvkem" 0 12 (ivy-index 1)) #("doom-1337" 0 9 (ivy-index 0)) #("doom-nova" 0 9 (ivy-index 35)) #("doom-homage-white" 0 17 (ivy-index 18)) #("doom-homage-black" 0 17 (ivy-index 17)) #("doom-henna" 0 10 (ivy-index 16)) #("doom-gruvbox" 0 12 (ivy-index 15)) #("doom-dracula" 0 12 (ivy-index 10)) #("doom-dark+" 0 10 (ivy-index 9)) #("/Users/evolify/code/web/b/Recoil.jsx" 0 36 (ivy-index 3)) #("light" 0 5 (ivy-index 6)) "doom-moonlight" "light-blue" #("treemacs" 0 8 (ivy-index 0)) #("load-theme" 0 10 (ivy-index 0)) #("find-fi" 0 7 (ivy-index 0)) "find-file" #("doom-acario-light" 0 17 (ivy-index 3)) #("/Users/evolify/.doom.d/custom.el" 0 32 (ivy-index 10)) #("tsconfig.json" 0 13 (ivy-index 0)) #("~/mi/code/libai-mobile/" 0 23 (ivy-index 1)) #("week" 0 4 (ivy-index 1)) "src/weekly-report/utils.tsx" #("wombat" 0 6 (ivy-index 74)) #("doom-tomorrow-night" 0 19 (ivy-index 56)) #("doom-snazzy" 0 11 (ivy-index 49)) #("doom-shades-of-purple" 0 21 (ivy-index 48)) #("doom-plain-dark" 0 15 (ivy-index 45)) #("doom-outrun-electric" 0 20 (ivy-index 42)) #("doom-opera" 0 10 (ivy-index 41)) #("doom-old-hope" 0 13 (ivy-index 37)) #("doom-oceanic-next" 0 17 (ivy-index 36)) #("doom-nord" 0 9 (ivy-index 34)) #("doom-monokai-pro" 0 16 (ivy-index 29)) #("doom-monokai-classic" 0 20 (ivy-index 26)) #("doom-molokai" 0 12 (ivy-index 25)) #("doom-material" 0 13 (ivy-index 23)) #("doom-manegarm" 0 13 (ivy-index 22)) #("doom-laserwave" 0 14 (ivy-index 21)) #("doom-ir-black" 0 13 (ivy-index 20)) #("doom-horizon" 0 12 (ivy-index 19)) #("doom-flatwhite" 0 14 (ivy-index 13)) #("doom-fairy-floss" 0 16 (ivy-index 12)) #("doom-ephemeral" 0 14 (ivy-index 11)) #("doom-challenger-deep" 0 20 (ivy-index 7)) #("doom-spacegrey" 0 14 (ivy-index 0)) #("weekly" 0 6 (ivy-index 0)) "src/weekly-report/App.scss"))
(setq counsel-M-x-history '(#("load-theme" 0 10 (ivy-index 0)) #("load-th" 0 7 (ivy-index 0)) #("magit" 0 5 (ivy-index 1)) #("git" 0 3 (ivy-index 0)) "magit-worktree" #("reload" 0 6 (ivy-index 0)) "doom/reload" #("ace-window" 0 10 (ivy-index 0)) #("ace-win" 0 7 (ivy-index 0)) #("+zen/toggle-fullscreen" 0 22 (ivy-index 0)) #("zen" 0 3 (ivy-index 1)) "+zen/toggle" #("add-p" 0 5 (ivy-index 5)) "treemacs-add-project-to-workspace" #("find-file" 0 9 (ivy-index 0)) #("find-pro" 0 8 (ivy-index 0)) "profiler-find-profile" #("open-pro" 0 8 (ivy-index 0)) "projectile-switch-open-project" #("windmove-le" 0 11 (ivy-index 0)) "windmove-left" #("mov" 0 3 (ivy-index 0)) "windmove-right" #("lsp" 0 3 (ivy-index 1)) "lsp-ui-mode" #("doom" 0 4 (ivy-index 0)) "doom/reload" #("calen" 0 5 (ivy-index 0)) "calendar" #("cust" 0 4 (ivy-index 1)) "customize-option" "customize" #("customize-op" 0 12 (ivy-index 0)) "customize-option" "doom/reload" #("re" 0 2 (ivy-index 0)) "doom/reload" #("term" 0 4 (ivy-index 0)) #("doom/reload" 0 11 (ivy-index 0)) #("doom/re" 0 7 (ivy-index 0)) #("windmove-ri" 0 11 (ivy-index 0)) "windmove-right" "windmove-left" #("window-move" 0 11 (ivy-index 2)) "+evil/window-move-left" #("marks" 0 5 (ivy-index 2)) "evil-show-marks" "list-bookmarks" #("markdown" 0 8 (ivy-index 2)) "markdown-mode" #("js-" 0 3 (ivy-index 0)) "nodejs-repl" #("debug" 0 5 (ivy-index 0)) #("tree" 0 4 (ivy-index 1)) "treemacs" #("org-ca" 0 6 (ivy-index 0)) "org-capture" #("open-file" 0 9 (ivy-index 0)) "eww-open-file" #("open" 0 4 (ivy-index 0)) "+fold/open" #("repl" 0 4 (ivy-index 0)) "nodejs-repl" #("fix" 0 3 (ivy-index 0)) "tide-fix" #("nodejs" 0 6 (ivy-index 0)) "nodejs-repl" #("shell" 0 5 (ivy-index 0)) #("she" 0 3 (ivy-index 0)) #("max" 0 3 (ivy-index 0)) "maximize-window" #("todo" 0 4 (ivy-index 6)) "todo-search" "todo-menu" "todo-show" #("nodejs-repl-mode" 0 16 (ivy-index 0)) "nodejs-repl" #("nodejs-repl-send-buffer" 0 23 (ivy-index 0)) #("grep" 0 4 (ivy-index 0)) "nodejs-repl" #("evil-mode" 0 9 (ivy-index 0)) #("ev" 0 2 (ivy-index 0)) #("js2-mode" 0 8 (ivy-index 0)) #("treemacs-select-window" 0 22 (ivy-index 0)) #("treemacs-" 0 9 (ivy-index 34)) #("treemacs" 0 8 (ivy-index 17)) "treemacs-git-mode" #("treemac" 0 7 (ivy-index 0)) "treemacs-peek" "treemacs-peek" #("load" 0 4 (ivy-index 0)) #("speedbar" 0 8 (ivy-index 0)) "speedbar-get-focus" "speedbar-mode" "speedbar-get-focus" #("eshell" 0 6 (ivy-index 0)) #("find" 0 4 (ivy-index 1)) "treemacs-next-project"))
(setq file-name-history '(#("/Users/evolify/mi/code/webapp/" 0 30 (ivy-index 0)) #("/Users/evolify/" 0 15 (ivy-index 0)) #("/Users/evolify/code/web/b/jkkk" 0 30 (ivy-index 0)) #("/Users/evolify/mi/code/libai-mobile/" 0 36 (ivy-index 2)) #("/Users/evolify/mi/code/" 0 23 (ivy-index 0)) #("/Users/evolify/code/web/b/" 0 26 (ivy-index 0)) #("/Users/evolify/.doom.d/config.el" 0 32 (ivy-index 2))))
(setq evil-ex-history '(#("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("bd" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("bd" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("bn" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("bN" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("bd" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("q" 0 1 (ex-index 1)) #("e org/refile.org" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("q" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("vs" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("qa" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("vs" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("sp" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("w" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("treemacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8)) #("q" 0 1 (ex-index 1)) #("vs" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("s" 0 1 (ex-index 1)) #("load-theme" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("treemacs" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8)) #("find-file " 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10)) #("q" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("wqall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5)) #("qall" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("q" 0 1 (ex-index 1))))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq evil-jumps-history '((1636 "/Users/evolify/mi/code/webapp/src/apps/@tryout/components/apply/Lottery.tsx") (3210 "/Users/evolify/mi/code/webapp/src/apps/@tryout/components/apply/Lottery.tsx") (379 "/Users/evolify/code/web/activity/test.js") (422 "/Users/evolify/code/web/activity/test.js") (358 "/Users/evolify/code/web/activity/test.js") (375 "/Users/evolify/code/web/activity/test.js") (10 "/Users/evolify/code/web/activity/test.js")))
(setq counsel-compile-history 'nil)
(setq kill-ring '(" " "UserStatus" "SW } = require(\"workbox-webpack-plugin\")" "miot.config.js" "
" "window.location.href
" "console.log(c)

" "
" "test(1,2)
" "<location></location>
" "," "        <div className=\"abc\">
          
        </div>
" "        <div className=\"abc\">
" "        <CardLoader />
" "        <div className=\"abc\">
          
        </div>
" "  }, [])" "
" "      </div>
" "        
" "      <div class=\"abc\">
" "<div></div>
" "window.location.href = 
" "console.log()
" "
" "** [ ] todo

" " " "  -- or a function that receives the defaults and returns a list
" "conso
" "  const [count, setCount] = useRecoilState(counter2)
" "  const [count, setCount] = useRecoilState(counter2)
" "function Counter2() {
" "
" "  [2021-07-05 一]" "
" "    
" "window.location.href = abc
" "defaults write org.gnu.Emacs TransparentTitleBar DARK" "  )" "const conter3 = atom({
  key: \"\",
  default: 100
})
" "const conter3 = atom({
" "const conter3 = atom({
" "<>
        <h1>State</h1>
        <StateCounter />
" "    \"st\"
" "buffer.                                                 |
 --------------------------------------------------------------------------------------
    \\
     \\
   ____
   /  \\
   |  |
   @  @
   |  |
   || |/
   || ||
   |\\_/|
   \\___:" "    uid: getCookie(\"cUserId\") || getCookie(\"userId\"),
" "    params
" "params" "
" "===
"))
(setq register-alist '((107) (113) (48 . "console.log(c)

")))
(setq mark-ring 'nil)
(setq search-ring '(#("sum" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("Test" 0 4 (isearch-case-fold-search nil isearch-regexp-function nil)) #("jkk" 0 3 (isearch-regexp-function nil isearch-case-fold-search t)) #("jjjjjjjjjj" 0 10 (isearch-case-fold-search t isearch-regexp-function nil)) #("jkkj" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("jjjjjjjj" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("jkkkkk" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("j" 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #("jk" 0 2 (isearch-case-fold-search t isearch-regexp-function nil)) #("count" 0 5 (isearch-regexp-function nil isearch-case-fold-search t)) #("jkj" 0 3 (isearch-regexp-function nil isearch-case-fold-search t)) #("jjjjjjjjj" 0 9 (isearch-regexp-function nil isearch-case-fold-search t)) #("jkkkkkjjj" 0 9 (isearch-regexp-function nil isearch-case-fold-search t)) #("0" 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #("import" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("render" 0 6 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq regexp-search-ring 'nil)
