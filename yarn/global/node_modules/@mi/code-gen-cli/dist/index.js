"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gen = exports.list = void 0;
require("symbol-observable");
const node_1 = require("@angular-devkit/core/node");
const utils_1 = require("./utils");
const code_gen_utils_1 = require("@mi/code-gen-utils");
function list(collectionName) {
    return __awaiter(this, void 0, void 0, function* () {
        if (collectionName) {
            (yield utils_1.getSchematics(collectionName)).forEach(t => console.log(t));
        }
        else {
            const collections = yield code_gen_utils_1.getTemplates();
            collections.forEach(t => console.log(t));
        }
    });
}
exports.list = list;
function gen(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const { stdout, stderr } = process;
        /** Create the DevKit Logger used through the CLI. */
        const logger = node_1.createConsoleLogger(argv['verbose'], stdout, stderr);
        /** Get the collection an schematic name from the first argument. */
        const { collection, schematic, ready } = yield utils_1.parseSchematicName(argv.schematic || null, argv.debug);
        if (ready) {
            return utils_1.gennerate(collection, schematic, argv, logger);
        }
        return -1;
    });
}
exports.gen = gen;
//# sourceMappingURL=index.js.map