#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const _1 = require(".");
yargs
    // generate code
    .command("* [schematic]", "generate", yargs => {
    yargs
        .usage(`Usage: $0 [CollectionName:]SchematicName [options, ...]
    如果CollectionName没有提供，会使用cli内置collection: @mi/tmpl-react
    任何额外参数都会传递给Schematics.

    模板库：http://fe.io.mi.srv/code-gen/
    文档：http://fe.io.mi.srv/code-gen/doc
  `)
        .example('$0 @mi/tmpl-react:rc src/page/App -f', '依据@mi/tmpl-react中的rc schematic，在src/page/目录下创建App组件，会新建文件App.jsx、App.scss')
        .positional("schematic", {
        desc: "schematic必须",
        type: "string",
        demandOption: "schematic必须"
    })
        .options({
        force: {
            alias: 'f',
            desc: '文件存在时是否覆盖'
        },
        debug: {
            desc: '调试模式，如果collection为相对路径，则默认为true，要关掉就手动设置-debug=false'
        },
        allowPrivate: {
            desc: "允许命令行运行私有schematics, 默认为false"
        },
        dryRun: {
            desc: "不输出任何东西，只展示要执行的动作，当debug为true时，默认值为true"
        },
        listSchematics: {
            alias: "l",
            desc: "列出当前collection下的所有schematics"
        },
        verbose: {
            desc: "展示更多信息"
        }
    });
}, argv => {
    return _1.gen(argv);
})
    // list collections or schematics
    .command("list [collection]", "如果collection不为空，列出collection下的所有schematics，如果collection为空，就列出所有collections", yargs => {
    yargs
        .positional("collection", {
        desc: "collectionName或者为空",
        type: "string"
    });
}, argv => {
    return _1.list(argv.collection);
})
    .alias("v", "version")
    .alias("h", "help")
    .argv;
//# sourceMappingURL=bin.js.map