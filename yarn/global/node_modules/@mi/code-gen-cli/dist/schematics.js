"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("symbol-observable");
const node_1 = require("@angular-devkit/core/node");
const utils_1 = require("./utils");
function main({ argv, stdout = process.stdout, stderr = process.stderr, }) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log(argv);
        /** Create the DevKit Logger used through the CLI. */
        const logger = node_1.createConsoleLogger(argv['verbose'], stdout, stderr);
        /** Get the collection an schematic name from the first argument. */
        const { collection, schematic, } = utils_1.parseSchematicName(argv._.shift() || null);
        /** If the user wants to list schematics, we simply show all the schematic names. */
        if (argv['list-schematics']) {
            logger.info(utils_1.getSchematics(collection).join("\n"));
            return 0;
        }
        if (!schematic) {
            logger.info(utils_1.getUsage());
            // TODO prompt to select schematics.
            return 1;
        }
        return utils_1.gennerate(collection, schematic, argv, logger);
    });
}
exports.default = main;
//# sourceMappingURL=schematics.js.map